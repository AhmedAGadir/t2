{"version":3,"sources":["reducers/gridTypes.jsx","reducers/selectors.js","reducers/gridReducer.jsx","store.jsx","helpers/idGenerator.js","reducers/gridActions.jsx","components/AllViews/ViewCellRenderer.jsx","components/AllViews/AllViews.jsx","components/TabsView/TabsList/GridTab.jsx","components/TabsView/TabsList/TabsList.jsx","helpers/helpers.js","components/MyGrid/MyGrid.jsx","components/TabsView/PanelsList/Panel.jsx","components/TabsView/PanelsList/PanelsList.jsx","components/TabsView/TabsView.jsx","helpers/generateGridConfig.js","components/ActionButtons/SaveLocalBtn.jsx","components/ActionButtons/ActionButtons.jsx","App.jsx","theme.js","index.js"],"names":["types","getCurrentViewAllGrids","state","allViews","currentViewInfo","index","allGrids","getCurrentViewTabIndex","currentViewIndex","currentView","tabIndex","getCurrentView","getViewById","id","viewIndex","findIndex","view","Error","getGridByViewAndGridId","viewId","gridId","gridIndex","grid","getGridById","foundGrid","i","length","j","addNewView","produce","draftState","newView","push","removeView","viewIndexToBeRemoved","getViewIndexById","splice","changeView","updatedCurrentViewInfo","addNewTab","gridConfig","changeTabName","newName","name","changeTabIndex","setCurrentViewInfoToNull","setGridData","newData","rowData","saveGridSortModel","sortModel","saveGridFilterModel","filterModel","saveGridColumnState","columnState","saveGridColumnGroupState","columnGroupState","saveGridPivotModeState","isPivotMode","saveStoreStateToLocalStorage","cache","forEach","cachedView","rowSelectionSyncStatus","cachedGrid","columnDefs","url","fetchAgain","cacheStringified","JSON","stringify","localStorage","setItem","restoreStoreStateToLocalStorage","parse","getItem","setGridFetchAgainToFalse","destroyTab","setRowSelectionSyncStatus","status","changeViewName","initialState","window","cacheParsed","stateAsString","hardCodedState","createStore","action","payload","type","composeWithDevTools","applyMiddleware","thunk","num","genId","Date","actions","createNewView","dispatch","getState","newViewId","createNewTab","isViewAvailable","nextTabIndex","store","currentViewId","setTabIndex","fetchGridData","destroyView","isCurrentView","isLastView","nextView","fetch","then","response","json","fetchGridDataSuccess","catch","err","fetchGridDataFail","changeTab","gridUrl","indx","nextAvailableIndex","ViewCellRenderer","props","viewName","data","styles","backgroundColor","btnRef","React","createRef","onDeleteView","bind","e","document","activeElement","blur","stopPropagation","this","current","addEventListener","removeEventListener","color","setState","IconButton","variant","onMouseEnter","changeBackgroundColor","onMouseLeave","style","marginRight","ref","aria-label","fontSize","Component","LicenseManager","setLicenseKey","AllViews","frameworkComponents","viewCellRenderer","field","headerName","filter","sortable","flex","editable","onCellValueChanged","params","newValue","valueGetter","cellRenderer","cellRendererParams","prevProps","syncStatus","nodeToSelect","gridApi","getRowNode","isAlreadySelected","selected","undefined","setSelected","syncRowSelection","node","api","columnApi","map","className","overlayNoRowsTemplate","rowSelection","onGridReady","onFirstDataRendered","onRowSelected","getRowNodeId","rowHeight","popupParent","body","PureComponent","connect","bindActionCreators","GridTab","classes","gridName","tabProps","useState","isEditing","setEditing","inputVal","setInputValue","useSelector","useDispatch","stopEditing","Tab","component","icon","Input","onFocus","target","select","defaultValue","onChange","value","autoFocus","onBlur","onKeyPress","key","wrapper","tabWrapper","onDoubleClick","label","a11yProps","container","onClick","memo","TabsList","allTabs","mapAllGridsToTabs","AppBar","position","Tabs","newVal","scrollButtons","indicatorColor","textColor","withStyles","theme","flexDirection","closeIconBtn","margin","tabsFlexContainer","height","debounce","func","wait","immediate","timeout","context","args","arguments","later","apply","callNow","clearTimeout","setTimeout","MyGrid","defaultColDef","resizable","enableValue","enablePivot","enableRowGroup","debounceSaveGridColumnState","debounceSaveGridColumnGroupState","debounceSaveGridPivotModeState","gridColumnApi","getFilterModel","getSortModel","isPivotModeDifferent","setPivotMode","setColumnState","setColumnGroupState","setSortModel","setFilterModel","getColumnState","getColumnGroupState","zIndex","sideBar","onFilterChanged","onSortChanged","onColumnVisible","onSaveGridColumnState","onColumnPinned","onColumnResized","onColumnMoved","onColumnRowGroupChanged","onColumnValueChanged","onColumnPivotChanged","onColumnPivotModeChanged","onSavePivotModeState","Panel","children","other","role","hidden","aria-labelledby","areEqual","nextProps","PanelsList","currentViewTabIndex","allPanels","TabsView","Alert","elevation","SaveLocalBtn","open","setOpen","handleClose","event","reason","Button","size","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","onClose","severity","ActionButtons","clear","App","createMuiTheme","ReactDOM","render","ThemeProvider","getElementById"],"mappings":"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","file":"static/js/main.895a25f4.chunk.js","sourcesContent":["export const types = {\n    // COMPOSITE ACTIONS\n    CREATE_NEW_VIEW: \"CREATE_NEW_VIEW\",\n    DESTROY_VIEW: \"DESTROY_VIEW\",\n  \n    CREATE_NEW_TAB: \"CREATE_NEW_TAB\",\n    DESTROY_TAB: \"DESTROY_TAB\",\n  \n    // ELEMENTARY ACTIONS\n    ADD_NEW_VIEW: \"ADD_NEW_VIEW\",\n    REMOVE_VIEW: \"REMOVE_VIEW\",\n    CHANGE_VIEW_NAME: \"CHANGE_VIEW_NAME\",\n  \n    CHANGE_VIEW: \"CHANGE_VIEW\",\n    ADD_NEW_TAB: \"ADD_NEW_TAB\",\n    CHANGE_TAB_NAME: \"CHANGE_TAB_NAME\",\n  \n    SET_TAB_INDEX: \"SET_TAB_INDEX\",\n    SET_CURRENT_VIEW_INFO_TO_NULL: \"SET_CURRENT_VIEW_INFO_TO_NULL\",\n    SET_GRID_DATA: \"SET_GRID_DATA\",\n    FETCH_GRID_DATA: \"FETCH_GRID_DATA\",\n  \n    SAVE_GRID_SORT_MODEL: \"SAVE_GRID_SORT_MODEL\",\n    SAVE_GRID_FILTER_MODEL: \"SAVE_GRID_FILTER_MODEL\",\n  \n    SAVE_GRID_COLUMN_STATE: \"SAVE_GRID_COLUMN_STATE\",\n    SAVE_GRID_COLUMN_GROUP_STATE: \"SAVE_GRID_COLUMN_GROUP_STATE\",\n    SAVE_GRID_PIVOT_MODE_STATE: \"SAVE_GRID_PIVOT_MODE_STATE\",\n  \n    SAVE_STORE_STATE_TO_LOCAL_STORAGE: \"SAVE_STORE_STATE_TO_LOCAL_STORAGE\",\n    RESTORE_STORE_STATE_TO_LOCAL_STORAGE: \"RESTORE_STORE_STATE_TO_LOCAL_STORAGE\",\n  \n    SET_GRID_FETCH_AGAIN_TO_FALSE: \"SET_GRID_FETCH_AGAIN_TO_FALSE\",\n    SET_ROW_SELECTION_SYNC_STATUS: \"SET_ROW_SELECTION_SYNC_STATUS\",\n  };\n  ","export function getCurrentViewAllGrids(state) {\n    return state?.allViews[state?.currentViewInfo?.index]?.allGrids\n      ? state?.allViews[state?.currentViewInfo?.index].allGrids\n      : [];\n  }\n  \n  export function getCurrentViewTabIndex(state) {\n    let currentViewInfo = state.currentViewInfo;\n    let currentViewIndex = currentViewInfo?.index;\n    let currentView = state?.allViews[currentViewIndex];\n    let tabIndex = currentView?.tabIndex ? currentView.tabIndex : 0;\n  \n    return tabIndex;\n  }\n  \n  export function getCurrentView(state) {\n    return state.currentViewInfo\n      ? state.allViews[state.currentViewInfo.index]\n      : null;\n  }\n  \n  export function getViewById(state, id) {\n    let viewIndex = state.allViews.findIndex((view) => {\n      return view.id === id;\n    });\n  \n    let view = state.allViews[viewIndex];\n  \n    if (view) {\n      return view;\n    }\n  \n    throw new Error(\"VIEW NOT FOUND!!\");\n  }\n  \n  export function getViewIndexById(state, id) {\n    let viewIndex = state.allViews.findIndex((view) => {\n      return view.id === id;\n    });\n  \n    if (viewIndex > -1) {\n      return viewIndex;\n    }\n  \n    throw new Error(\"VIEW INDEX NOT FOUND!!\");\n  }\n  \n  export function getGridByViewAndGridId(state, viewId, gridId) {\n    let view = getViewById(state, viewId);\n  \n    let gridIndex = view.allGrids.findIndex((grid) => {\n      return grid.id === gridId;\n    });\n  \n    let grid = view.allGrids[gridIndex];\n  \n    if (grid) {\n      return grid;\n    }\n  \n    throw new Error(\"GRID NOT FOUND!!\");\n  }\n  \n  export function getGridById(state, gridId) {\n    let allViews = state.allViews;\n    let foundGrid;\n  \n    for (let i = 0; i < allViews.length; i++) {\n      let allGrids = allViews[i].allGrids;\n  \n      if (typeof grid === \"object\") break;\n  \n      for (let j = 0; j < allGrids.length; j++) {\n        let grid = allGrids[j];\n  \n        if (grid.id === gridId) {\n          foundGrid = grid;\n          break;\n        }\n      }\n    }\n  \n    if (foundGrid) return foundGrid;\n  \n    new Error(\" GRID NOT FOUND << < << \");\n  }\n  ","import { types } from \"../reducers/gridTypes\";\n\nimport { produce } from \"immer\"; // https://www.youtube.com/watch?v=FmKjwh34Rn8\nimport {\n  getCurrentViewAllGrids,\n  getViewIndexById,\n  getGridByViewAndGridId,\n  getGridById,\n  getViewById,\n} from \"./selectors\";\n\nexport default function gridReducer(state = {}, action) {\n  const payload = action.payload;\n  switch (action.type) {\n    case types.ADD_NEW_VIEW:\n      return addNewView(state, payload);\n\n    case types.REMOVE_VIEW:\n      return removeView(state, payload);\n\n    case types.CHANGE_VIEW:\n      return changeView(state, payload);\n    case types.CHANGE_VIEW_NAME:\n      return changeViewName(state, payload);\n\n    case types.ADD_NEW_TAB:\n      return addNewTab(state, payload);\n\n    case types.CHANGE_TAB_NAME:\n      return changeTabName(state, payload);\n\n    case types.SET_TAB_INDEX:\n      return changeTabIndex(state, payload);\n\n    case types.SET_CURRENT_VIEW_INFO_TO_NULL:\n      return setCurrentViewInfoToNull(state, payload);\n\n    case types.SET_GRID_DATA:\n      return setGridData(state, payload);\n\n    case types.SAVE_GRID_SORT_MODEL:\n      return saveGridSortModel(state, payload);\n\n    case types.SAVE_GRID_FILTER_MODEL:\n      return saveGridFilterModel(state, payload);\n\n    case types.SAVE_GRID_COLUMN_STATE:\n      return saveGridColumnState(state, payload);\n\n    case types.SAVE_GRID_COLUMN_GROUP_STATE:\n      return saveGridColumnGroupState(state, payload);\n\n    case types.SAVE_GRID_PIVOT_MODE_STATE:\n      return saveGridPivotModeState(state, payload);\n\n    case types.SAVE_STORE_STATE_TO_LOCAL_STORAGE:\n      return saveStoreStateToLocalStorage(state);\n    case types.RESTORE_STORE_STATE_TO_LOCAL_STORAGE:\n      return restoreStoreStateToLocalStorage(state);\n\n    case types.SET_GRID_FETCH_AGAIN_TO_FALSE:\n      return setGridFetchAgainToFalse(state, payload);\n    case types.DESTROY_TAB:\n      return destroyTab(state, payload);\n\n    case types.SET_ROW_SELECTION_SYNC_STATUS:\n      return setRowSelectionSyncStatus(state, payload);\n\n    default:\n      return state;\n  }\n}\n\nfunction addNewView(state, id) {\n  return produce(state, (draftState) => {\n    let newView = {\n      id: id,\n      allGrids: [],\n    };\n\n    draftState.allViews.push(newView);\n  });\n}\n\nfunction removeView(state, id) {\n  return produce(state, (draftState) => {\n    let viewIndexToBeRemoved = getViewIndexById(draftState, id);\n    draftState.allViews.splice(viewIndexToBeRemoved, 1);\n  });\n}\n\nfunction changeView(state, id) {\n  return produce(state, (draftState) => {\n    let index = draftState.allViews.findIndex((view) => {\n      return view.id === id;\n    });\n    let updatedCurrentViewInfo = { id, index };\n    draftState.currentViewInfo = updatedCurrentViewInfo;\n  });\n}\n\nfunction addNewTab(state, gridConfig) {\n  return produce(state, (draftState) => {\n    let currentViewAllGrids = getCurrentViewAllGrids(draftState);\n    currentViewAllGrids.push(gridConfig);\n  });\n}\n\nfunction changeTabName(state, { viewId, gridId, newName }) {\n  return produce(state, (draftState) => {\n    let grid = getGridByViewAndGridId(draftState, viewId, gridId);\n    grid.name = newName;\n  });\n}\n\nfunction changeTabIndex(state, tabIndex) {\n  return produce(state, (draftState) => {\n    let currentView = draftState.allViews[draftState.currentViewInfo.index];\n    currentView.tabIndex = tabIndex;\n  });\n}\n\nfunction setCurrentViewInfoToNull(state) {\n  return produce(state, (draftState) => {\n    draftState.currentViewInfo = null;\n  });\n}\n\nfunction setGridData(state, { viewId, gridId, newData }) {\n  return produce(state, (draftState) => {\n    let grid = getGridByViewAndGridId(draftState, viewId, gridId);\n    grid.rowData = newData;\n  });\n}\n\nfunction saveGridSortModel(state, { gridId, sortModel }) {\n  return produce(state, (draftState) => {\n    let grid = getGridById(draftState, gridId);\n\n    grid.sortModel = sortModel;\n  });\n}\n\nfunction saveGridFilterModel(state, { gridId, filterModel }) {\n  return produce(state, (draftState) => {\n    let grid = getGridById(draftState, gridId);\n\n    grid.filterModel = filterModel;\n  });\n}\n\nfunction saveGridColumnState(state, { gridId, columnState }) {\n  return produce(state, (draftState) => {\n    let grid = getGridById(draftState, gridId);\n    if (grid) {\n      grid.columnState = columnState;\n    }\n  });\n}\n\nfunction saveGridColumnGroupState(state, { gridId, columnGroupState }) {\n  return produce(state, (draftState) => {\n    let grid = getGridById(draftState, gridId);\n    if (grid) {\n      grid.columnGroupState = columnGroupState;\n    }\n  });\n}\n\nfunction saveGridPivotModeState(state, { gridId, isPivotMode }) {\n  return produce(state, (draftState) => {\n    let grid = getGridById(draftState, gridId);\n    grid.isPivotMode = isPivotMode;\n  });\n}\n\nfunction saveStoreStateToLocalStorage(state) {\n  let cache = {\n    currentViewInfo: state.currentViewInfo,\n    allViews: [],\n  };\n\n  state.allViews.forEach((view) => {\n    let cachedView = {\n      id: view.id,\n      tabIndex: view.tabIndex,\n      allGrids: [],\n      rowSelectionSyncStatus: view?.rowSelectionSyncStatus,\n      name: view.name,\n    };\n\n    view.allGrids.forEach(\n      ({\n        id,\n        columnDefs,\n        url,\n        sortModel,\n        filterModel,\n        columnState,\n        columnGroupState,\n        isPivotMode,\n        name,\n      }) => {\n        let cachedGrid = {\n          id,\n          columnDefs,\n          url,\n          sortModel,\n          filterModel,\n          columnState,\n          columnGroupState,\n          fetchAgain: true,\n          isPivotMode,\n          name,\n        };\n\n        cachedView.allGrids.push(cachedGrid);\n      }\n    );\n\n    cache.allViews.push(cachedView);\n  });\n\n  let cacheStringified = JSON.stringify(cache);\n\n  localStorage.setItem(\"cache\", cacheStringified);\n\n  return state;\n}\n\nfunction restoreStoreStateToLocalStorage(state) {\n  return JSON.parse(localStorage.getItem(\"cache\"));\n}\n\nfunction setGridFetchAgainToFalse(state, { viewId, gridId }) {\n  return produce(state, (draftState) => {\n    let grid = getGridByViewAndGridId(draftState, viewId, gridId);\n    grid.fetchAgain = false;\n  });\n}\n\nfunction destroyTab(state, tabIndex) {\n  return produce(state, (draftState) => {\n    let currentViewAllGrids = getCurrentViewAllGrids(draftState);\n\n    currentViewAllGrids.splice(tabIndex, 1);\n  });\n}\n\nfunction setRowSelectionSyncStatus(state, { viewId, status }) {\n  return produce(state, (draftState) => {\n    let view = getViewById(draftState, viewId);\n    view.rowSelectionSyncStatus = status;\n  });\n}\n\nfunction changeViewName(state, { viewId, newName }) {\n  return produce(state, (draftState) => {\n    let view = getViewById(draftState, viewId);\n    view.name = newName;\n  });\n}\n","import { applyMiddleware, createStore } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\n\nimport gridReducer from \"./reducers/gridReducer\";\nimport logger from \"redux-logger\";\n\nimport thunk from \"redux-thunk\";\n\nlet initialState;\nlet cache = window.localStorage.getItem(\"cache\");\n\nif (cache) {\n  let cacheParsed = JSON.parse(cache);\n  initialState = { ...cacheParsed };\n} else {\n  initialState = {\n    ...hardCodedState(),\n  };\n}\n\nexport default createStore(\n  gridReducer,\n  initialState,\n  composeWithDevTools(applyMiddleware(thunk))\n  // composeWithDevTools(applyMiddleware(thunk, logger))\n);\n\nfunction hardCodedState() {\n  let stateAsString = `{\"currentViewInfo\":{\"id\":\"Thu Jun 04 2020 08:01:54 GMT+0100 (British Summer Time)2\",\"index\":0},\"allViews\":[{\"id\":\"Thu Jun 04 2020 08:01:54 GMT+0100 (British Summer Time)2\",\"tabIndex\":0,\"allGrids\":[{\"id\":\"Thu Jun 04 2020 08:01:54 GMT+0100 (British Summer Time)0\",\"columnDefs\":[{\"field\":\"athlete\"},{\"field\":\"age\"},{\"field\":\"country\"},{\"field\":\"year\"},{\"field\":\"date\"},{\"field\":\"sport\"},{\"field\":\"gold\"},{\"field\":\"silver\"},{\"field\":\"bronze\"},{\"field\":\"total\"}],\"url\":\"https://raw.githubusercontent.com/ag-grid/ag-grid/master/grid-packages/ag-grid-docs/src/olympicWinnersSmall.json\",\"sortModel\":[],\"fetchAgain\":true,\"name\":\"Tab 1\"},{\"id\":\"Thu Jun 04 2020 08:01:55 GMT+0100 (British Summer Time)3\",\"columnDefs\":[{\"field\":\"athlete\"},{\"field\":\"age\"},{\"field\":\"country\"},{\"field\":\"year\"},{\"field\":\"date\"},{\"field\":\"sport\"},{\"field\":\"gold\"},{\"field\":\"silver\"},{\"field\":\"bronze\"},{\"field\":\"total\"}],\"url\":\"https://raw.githubusercontent.com/ag-grid/ag-grid/master/grid-packages/ag-grid-docs/src/olympicWinnersSmall.json\",\"fetchAgain\":true,\"name\":\"Tab 2\"}],\"rowSelectionSyncStatus\":\"SYNC_DONE\",\"name\":\"View A\"},{\"id\":\"Thu Jun 04 2020 08:01:56 GMT+0100 (British Summer Time)4\",\"tabIndex\":0,\"allGrids\":[{\"id\":\"Thu Jun 04 2020 08:02:08 GMT+0100 (British Summer Time)5\",\"columnDefs\":[{\"field\":\"athlete\"},{\"field\":\"age\"},{\"field\":\"country\"},{\"field\":\"year\"},{\"field\":\"date\"},{\"field\":\"sport\"},{\"field\":\"gold\"},{\"field\":\"silver\"},{\"field\":\"bronze\"},{\"field\":\"total\"}],\"url\":\"https://raw.githubusercontent.com/ag-grid/ag-grid/master/grid-packages/ag-grid-docs/src/olympicWinnersSmall.json\",\"fetchAgain\":true}],\"rowSelectionSyncStatus\":\"SYNC_DONE\",\"name\":\"View B\"}]}`;\n  return JSON.parse(stateAsString);\n}\n","let num = 0;\n\nexport default function genId() {\n  return new Date() + \"\" + num++;\n}\n","import { types } from \"./gridTypes\";\nimport store from \"../store\";\nimport genId from \"../helpers/idGenerator\";\nimport { getCurrentViewAllGrids } from \"./selectors\";\n\nexport const actions = {\n  // COMPLEX ACTIONS\n\n  createNewView() {\n    return (dispatch, getState) => {\n      var newViewId = genId();\n\n      dispatch(actions.addNewView(newViewId));\n      dispatch(actions.changeView(newViewId));\n    };\n  },\n\n  createNewTab(gridConfig) {\n    return (dispatch, getState) => {\n      let isViewAvailable = getState().currentViewInfo !== null;\n      // give the grid an id\n      gridConfig.id = genId();\n\n      // handle edge case, when no views are available\n      if (!isViewAvailable) {\n        let newViewId = genId();\n        dispatch(actions.createNewView(newViewId));\n      }\n      dispatch(actions.addNewTab(gridConfig));\n\n      let currentViewAllGrids = getCurrentViewAllGrids(store.getState());\n      let nextTabIndex = currentViewAllGrids.length - 1;\n      let currentViewId = store.getState().currentViewInfo.id;\n\n      dispatch(actions.setTabIndex(nextTabIndex));\n      dispatch(\n        actions.fetchGridData(currentViewId, gridConfig.id, gridConfig.url)\n      );\n    };\n  },\n\n  destroyView(viewId) {\n    return (dispatch, getState) => {\n      let currentViewId = getState().currentViewInfo.id;\n      let isCurrentView = currentViewId === viewId;\n      let isLastView = getState().allViews.length === 1;\n\n      dispatch(actions.removeView(viewId));\n\n      if (isLastView) {\n        dispatch(actions.setCurrentViewInfoToNull());\n        return;\n      }\n\n      if (isCurrentView && !isLastView) {\n        let allViews = getState().allViews;\n        let nextView = allViews[allViews.length - 1];\n        dispatch(actions.changeView(nextView.id));\n        return;\n      }\n\n      if (!isLastView && !isCurrentView) {\n        dispatch(actions.changeView(currentViewId));\n        return;\n      }\n    };\n  },\n\n  fetchGridData(viewId, gridId, url) {\n    return (dispatch) => {\n      fetch(url)\n        .then((response) => {\n          return response.json().then((rowData) => {\n            dispatch(actions.fetchGridDataSuccess(viewId, gridId, rowData));\n          });\n        })\n        .catch((err) => {\n          dispatch(actions.fetchGridDataFail(err));\n        });\n    };\n  },\n\n  fetchGridDataSuccess(viewId, gridId, rowData) {\n    return (dispatch) => {\n      dispatch(actions.setGridData(viewId, gridId, rowData));\n      dispatch(actions.setGridFetchAgainToFalse(viewId, gridId));\n    };\n  },\n\n  fetchGridDataFail(err) {\n    new Error(err, \" <<<< FETCH GRID DATA FAIL\");\n  },\n\n  changeTab(tabIndex) {\n    return (dispatch, getState) => {\n      let state = getState();\n      let currentViewIndex = state.currentViewInfo.index;\n      let currentView = state.allViews[currentViewIndex];\n      let viewId = state.currentViewInfo.id;\n      let grid = currentView.allGrids[tabIndex];\n      let gridId = grid.id;\n      let gridUrl = grid.url;\n      let fetchAgain = grid.fetchAgain;\n\n      dispatch(actions.setTabIndex(tabIndex));\n\n      if (fetchAgain) {\n        dispatch(actions.fetchGridData(viewId, gridId, gridUrl));\n      }\n    };\n  },\n\n  destroyTab(tabIndex) {\n    return (dispatch, getState) => {\n      dispatch({\n        type: types.DESTROY_TAB,\n        payload: tabIndex,\n      });\n\n      // if all CurrentView tabIndex exists in allGrids then do nothing, else change to next available tab\n\n      const currentViewIndex = getState().currentViewInfo.index;\n      const currentView = getState().allViews[currentViewIndex];\n\n      const indx = currentView.tabIndex;\n      const allGrids = currentView.allGrids;\n\n      let doesGridExist = allGrids[indx];\n      if (doesGridExist) return;\n\n      const nextAvailableIndex = allGrids.length - 1;\n\n      if (nextAvailableIndex !== -1)\n        dispatch(actions.changeTab(nextAvailableIndex));\n    };\n  },\n\n  // SIMPLE ACTIONS\n  addNewView(id) {\n    return {\n      type: types.ADD_NEW_VIEW,\n      payload: id,\n    };\n  },\n\n  changeTabName(viewId, gridId, newName) {\n    return {\n      type: types.CHANGE_TAB_NAME,\n      payload: { viewId, gridId, newName },\n    };\n  },\n\n  removeView(id) {\n    return {\n      type: types.REMOVE_VIEW,\n      payload: id,\n    };\n  },\n\n  changeViewName(viewId, newName) {\n    return {\n      type: types.CHANGE_VIEW_NAME,\n      payload: { viewId, newName },\n    };\n  },\n\n  changeView(id) {\n    return {\n      type: types.CHANGE_VIEW,\n      payload: id,\n    };\n  },\n\n  addNewTab(gridConfig) {\n    return {\n      type: types.ADD_NEW_TAB,\n      payload: gridConfig,\n    };\n  },\n\n  setTabIndex(tabIndex) {\n    return {\n      type: types.SET_TAB_INDEX,\n      payload: tabIndex,\n    };\n  },\n\n  setCurrentViewInfoToNull() {\n    return {\n      type: types.SET_CURRENT_VIEW_INFO_TO_NULL,\n    };\n  },\n\n  setGridData(viewId, gridId, newData) {\n    return {\n      type: types.SET_GRID_DATA,\n      payload: { viewId, gridId, newData },\n    };\n  },\n\n  saveGridSortModel(gridId, sortModel) {\n    return {\n      type: types.SAVE_GRID_SORT_MODEL,\n      payload: { gridId, sortModel },\n    };\n  },\n  saveGridFilterModel(gridId, filterModel) {\n    return {\n      type: types.SAVE_GRID_FILTER_MODEL,\n      payload: { gridId, filterModel },\n    };\n  },\n\n  saveGridColumnState(gridId, columnState) {\n    return {\n      type: types.SAVE_GRID_COLUMN_STATE,\n      payload: { gridId, columnState },\n    };\n  },\n\n  saveGridColumnGroupState(gridId, columnGroupState) {\n    return {\n      type: types.SAVE_GRID_COLUMN_GROUP_STATE,\n      payload: { gridId, columnGroupState },\n    };\n  },\n\n  saveGridPivotModeState(gridId, isPivotMode) {\n    return {\n      type: types.SAVE_GRID_PIVOT_MODE_STATE,\n      payload: { gridId, isPivotMode },\n    };\n  },\n\n  // except for rowData\n  saveStoreStateToLocalStorage() {\n    return {\n      type: types.SAVE_STORE_STATE_TO_LOCAL_STORAGE,\n    };\n  },\n\n  restoreStoreStateToLocalStorage() {\n    return {\n      type: types.RESTORE_STORE_STATE_TO_LOCAL_STORAGE,\n    };\n  },\n\n  setGridFetchAgainToFalse(viewId, gridId) {\n    return {\n      type: types.SET_GRID_FETCH_AGAIN_TO_FALSE,\n      payload: { viewId, gridId },\n    };\n  },\n  setRowSelectionSyncStatus(viewId, status) {\n    return {\n      type: types.SET_ROW_SELECTION_SYNC_STATUS,\n      payload: { viewId, status },\n    };\n  },\n};\n","import React, { Component } from \"react\";\n\nimport DeleteOutlinedIcon from \"@material-ui/icons/DeleteOutlined\";\nimport { IconButton } from \"@material-ui/core\";\n\nexport default class ViewCellRenderer extends Component {\n  constructor(props) {\n    super(props);\n    this.props = props;\n\n    this.state = {\n      viewName: this.props.data.viewName\n        ? this.props.data.viewName\n        : \"New View\",\n\n      styles: {\n        backgroundColor: \"rgba(0,0,0,0)\",\n      },\n    };\n    this.btnRef = React.createRef();\n    this.onDeleteView = this.onDeleteView.bind(this);\n  }\n\n  onDeleteView(e) {\n    document.activeElement.blur(); // workaround for flush update warning\n    e.stopPropagation();\n    let viewId = this.props.data.viewId;\n    this.props.destroyView(viewId);\n  }\n\n  componentDidMount() {\n    this.btnRef.current.addEventListener(\"click\", this.onDeleteView);\n  }\n\n  componentWillUnmount() {\n    this.btnRef.current.removeEventListener(\"click\", this.onDeleteView);\n  }\n\n  changeBackgroundColor(color) {\n    this.setState({\n      ...this.state,\n      styles: { ...this.state.styles, backgroundColor: color },\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <IconButton\n          color=\"primary\"\n          variant=\"contained\"\n          onMouseEnter={() => {\n            this.changeBackgroundColor(\"rgba(255,255,255,0.7)\");\n          }}\n          onMouseLeave={() => {\n            this.changeBackgroundColor(\"rgba(0,0,0,0)\");\n          }}\n          style={{\n            backgroundColor: this.state.styles.backgroundColor,\n            marginRight: \"10px\",\n          }}\n          ref={this.btnRef}\n          aria-label=\"delete\"\n        >\n          <DeleteOutlinedIcon color=\"primary\" fontSize=\"small\" />\n        </IconButton>\n\n        {this.state.viewName}\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport { AgGridReact } from \"ag-grid-react\";\n\nimport \"ag-grid-community/dist/styles/ag-grid.css\";\nimport \"ag-grid-community/dist/styles/ag-theme-alpine.css\";\nimport \"ag-grid-enterprise\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { actions } from \"../../reducers/gridActions\";\n\nimport { LicenseManager } from \"ag-grid-enterprise\";\nimport { getCurrentView } from \"../../reducers/selectors\";\nimport ViewCellRenderer from \"./ViewCellRenderer\";\n\nLicenseManager.setLicenseKey(\n  \"[TRIAL]_16_May_2020_[v2]_MTU4OTU4NzIwMDAwMA==b03f1f5b63303eabbc3b42a734fcc666\"\n);\n\nclass AllViews extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.frameworkComponents = {\n      viewCellRenderer: ViewCellRenderer,\n    };\n\n    this.columnDefs = [\n      {\n        field: \"viewName\",\n        headerName: \"Name\",\n        filter: true,\n        sortable: true,\n        flex: 1,\n        editable: true,\n        onCellValueChanged: (params) => {\n          this.props.actions.changeViewName(\n            params.data.viewId,\n            params.newValue\n          );\n        },\n        valueGetter: (params) =>\n          params.data.viewName ? params.data.viewName : \"New View\",\n        cellRenderer: \"viewCellRenderer\",\n        cellRendererParams: {\n          destroyView: this.props.actions.destroyView,\n        },\n      },\n    ];\n  }\n\n  syncRowSelection(prevProps) {\n    // Only SYNC ROW SELECTION WHEN NOT CURRENTLY ALREADY SYNCING\n    let currentViewInfo = this.props.currentViewInfo;\n\n    let syncStatus = this.props.currentView?.rowSelectionSyncStatus;\n    let nodeToSelect = this.gridApi.getRowNode(currentViewInfo?.id);\n    let isAlreadySelected = nodeToSelect?.selected;\n\n    if (\n      syncStatus === \"SYNCING\" ||\n      isAlreadySelected ||\n      nodeToSelect === undefined ||\n      currentViewInfo === null\n    )\n      return;\n\n    this.props.actions.setRowSelectionSyncStatus(currentViewInfo.id, \"SYNCING\");\n\n    nodeToSelect.setSelected(true);\n\n    this.props.actions.setRowSelectionSyncStatus(\n      currentViewInfo.id,\n      \"SYNC_DONE\"\n    );\n  }\n\n  componentDidUpdate(prevProps) {\n    this.syncRowSelection(prevProps);\n  }\n\n  onFirstDataRendered(params) {\n    let nodeToSelect = this.gridApi.getRowNode(this.props?.currentView?.id);\n    if (nodeToSelect) nodeToSelect.setSelected(true);\n  }\n\n  onRowSelected(params) {\n    // when state is syncing do nothing\n    if (this.props.currentView?.rowSelectionSyncStatus === \"SYNCING\") return;\n\n    // isSelectedNode makes sure to only pick the currently selected grid node, this is because rowSelected gets also triggered for deSelection\n    let isSelectedNode = params.node.selected;\n    if (isSelectedNode) this.props.actions.changeView(params.node.id);\n  }\n\n  onGridReady(params) {\n    this.gridApi = params.api;\n    this.columnApi = params.columnApi;\n  }\n\n  render() {\n    this.rowData = this.props.allViews.map((view) => {\n      return {\n        viewId: view.id,\n        viewName: view.name,\n      };\n    });\n\n    return (\n      <div className={`ag-theme-alpine  ${this.props.className}`}>\n        <AgGridReact\n          overlayNoRowsTemplate={\n            '<span style=\"padding: 10px; border: 2px solid #444; background: lightgoldenrodyellow;\"> There are no views available. Add a new view</span>'\n          }\n          rowSelection=\"single\"\n          rowData={this.rowData}\n          columnDefs={this.columnDefs}\n          onGridReady={this.onGridReady.bind(this)}\n          onFirstDataRendered={this.onFirstDataRendered.bind(this)}\n          onRowSelected={this.onRowSelected.bind(this)}\n          frameworkComponents={this.frameworkComponents}\n          getRowNodeId={(node) => node.viewId}\n          rowHeight={60}\n          popupParent={document.body}\n        ></AgGridReact>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  allViews: state.allViews,\n  currentViewInfo: state.currentViewInfo,\n  currentView: getCurrentView(state),\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  actions: bindActionCreators(actions, dispatch),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AllViews);\n","import Tab from \"@material-ui/core/Tab\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport { IconButton, Input } from \"@material-ui/core\";\nimport React, { useState, Fragment } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { actions } from \"../../../reducers/gridActions\";\n\nfunction GridTab(props) {\n  const { classes, gridName = \"New Tab\", gridId, index, ...tabProps } = props;\n\n  const [isEditing, setEditing] = useState(false);\n  const [inputVal, setInputValue] = useState(gridName);\n\n  const viewId = useSelector((state) => {\n    return state.currentViewInfo.id;\n  });\n\n  //   changeTabName(viewId, gridId, newName)\n  const dispatch = useDispatch();\n\n  function stopEditing() {\n    dispatch(actions.changeTabName(viewId, gridId, inputVal));\n    setEditing(false);\n  }\n\n  return (\n    <Fragment>\n      {!isEditing ? (\n        <Tab\n          {...tabProps}\n          classes={{ wrapper: classes.tabWrapper }}\n          component=\"div\"\n          onDoubleClick={(e) => {\n            setEditing(true);\n          }}\n          label={gridName}\n          {...a11yProps(index)}\n          icon={\n            <IconButton\n              container=\"div\"\n              onClick={(e) => {\n                e.stopPropagation(); // to prevent Parent onChange handler\n                dispatch(actions.destroyTab(index));\n              }}\n            >\n              <CloseIcon></CloseIcon>\n            </IconButton>\n          }\n        ></Tab>\n      ) : (\n        <Tab\n          {...tabProps}\n          component=\"div\"\n          icon={\n            <Input\n              onFocus={(e) => {\n                e.target.select();\n              }}\n              defaultValue={inputVal}\n              onChange={(e) => {\n                setInputValue(e.target.value);\n              }}\n              autoFocus\n              onBlur={() => {\n                stopEditing();\n              }}\n              onKeyPress={(e) => {\n                if (e.key === \"Enter\") {\n                  stopEditing();\n                }\n              }}\n            ></Input>\n          }\n        ></Tab>\n      )}\n    </Fragment>\n  );\n}\n\nexport default React.memo(GridTab);\n\nfunction a11yProps(index) {\n  return {\n    id: `scrollable-force-tab-${index}`,\n    \"aria-controls\": `scrollable-force-tabpanel-${index}`,\n  };\n}\n","import React from \"react\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Tabs from \"@material-ui/core/Tabs\";\n\nimport { withStyles } from \"@material-ui/styles\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { actions } from \"../../../reducers/gridActions\";\nimport {\n  getCurrentViewTabIndex,\n  getCurrentViewAllGrids,\n} from \"../../../reducers/selectors\";\nimport GridTab from \"./GridTab\";\n\nconst styles = (theme) => ({\n  tabWrapper: {\n    flexDirection: \"row-reverse !important\",\n  },\n  // Tab > Close Icon\n  closeIconBtn: {\n    color: \"red !important\",\n    margin: \"0px !important\",\n  },\n  tabsFlexContainer: {\n    height: \"100%\",\n  },\n});\n\nfunction TabsList(props) {\n  const { classes } = props;\n\n  const tabIndex = useSelector((state) => getCurrentViewTabIndex(state));\n  const allGrids = useSelector((state) => getCurrentViewAllGrids(state));\n  const dispatch = useDispatch();\n\n  const allTabs = mapAllGridsToTabs(allGrids, classes);\n\n  const handleChange = (e, newVal) => {\n    dispatch(actions.changeTab(newVal));\n  };\n\n  return (\n    <AppBar className={\"app-bar\"} position=\"static\" color=\"default\">\n      <Tabs\n        value={tabIndex}\n        onChange={handleChange}\n        variant=\"scrollable\"\n        scrollButtons=\"on\"\n        indicatorColor=\"primary\"\n        textColor=\"primary\"\n        aria-label=\"scrollable force tabs example\"\n      >\n        {allTabs}\n      </Tabs>\n    </AppBar>\n  );\n}\n\nexport default withStyles(styles)(React.memo(TabsList));\n\n//  ****\nfunction mapAllGridsToTabs(allGrids, classes) {\n  return allGrids.map((grid, index) => {\n    return (\n      <GridTab\n        key={grid.id}\n        gridName={grid.name}\n        gridId={grid.id}\n        index={index}\n        classes={classes}\n      ></GridTab>\n    );\n  });\n}\n","// Credit David Walsh (https://davidwalsh.name/javascript-debounce-function)\n\n// Returns a function, that, as long as it continues to be invoked, will not\n// be triggered. The function will be called after it stops being called for\n// N milliseconds. If `immediate` is passed, trigger the function on the\n// leading edge, instead of the trailing.\nexport function debounce(func, wait, immediate) {\n    var timeout;\n  \n    // This is the function that is actually executed when\n    // the DOM event is triggered.\n    return function executedFunction() {\n      // Store the context of this and any\n      // parameters passed to executedFunction\n      var context = this;\n      var args = arguments;\n  \n      // The function to be called after\n      // the debounce time has elapsed\n      var later = function () {\n        // null timeout to indicate the debounce ended\n        timeout = null;\n  \n        // Call function now if you did not on the leading end\n        if (!immediate) func.apply(context, args);\n      };\n  \n      // Determine if you should call the function\n      // on the leading or trail end\n      var callNow = immediate && !timeout;\n  \n      // This will reset the waiting every function execution.\n      // This is the step that prevents the function from\n      // being executed because it will never reach the\n      // inside of the previous setTimeout\n      clearTimeout(timeout);\n  \n      // Restart the debounce waiting period.\n      // setTimeout returns a truthy value (it differs in web vs node)\n      timeout = setTimeout(later, wait);\n  \n      // Call immediately if you're dong a leading\n      // end execution\n      if (callNow) func.apply(context, args);\n    };\n  }\n  ","import React, { Component } from \"react\";\nimport { AgGridReact } from \"ag-grid-react\";\nimport { debounce } from \"../../helpers/helpers\";\n\nimport \"ag-grid-community/dist/styles/ag-grid.css\";\nimport \"ag-grid-community/dist/styles/ag-theme-alpine-dark.css\";\nimport \"ag-grid-enterprise\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { actions } from \"../../reducers/gridActions\";\n\nimport { LicenseManager } from \"ag-grid-enterprise\";\n\nLicenseManager.setLicenseKey(\n  \"[TRIAL]_16_May_2020_[v2]_MTU4OTU4NzIwMDAwMA==b03f1f5b63303eabbc3b42a734fcc666\"\n);\n\nclass MyGrid extends Component {\n  constructor(props) {\n    super(props);\n\n    this.defaultColDef = {\n      sortable: true,\n      filter: true,\n      resizable: true,\n      enableValue: true,\n      enablePivot: true,\n      enableRowGroup: true,\n    };\n\n    this.debounceSaveGridColumnState = debounce((id, columnState) => {\n      this.props.actions.saveGridColumnState(id, columnState);\n    }, 100);\n\n    this.debounceSaveGridColumnGroupState = debounce((id, columnGroupState) => {\n      this.props.actions.saveGridColumnGroupState(id, columnGroupState);\n    }, 100);\n\n    this.debounceSaveGridPivotModeState = debounce((id, isPivotMode) => {\n      this.props.actions.saveGridPivotModeState(id, isPivotMode);\n    }, 100);\n  }\n\n  onGridReady(params) {\n    this.gridApi = params.api;\n    this.gridColumnApi = params.columnApi;\n\n    // When reloading the page and getting the state from local storage, fetch again the data for the currently displayed grid\n\n    let viewId = this.props.currentViewInfo.id;\n    let gridId = this.props.id;\n    let url = this.props.url;\n\n    if (this.props.fetchAgain) {\n      this.props.actions.fetchGridData(viewId, gridId, url);\n    }\n  }\n\n  onFilterChanged(params) {\n    let filterModel = params.api.getFilterModel();\n    this.props.actions.saveGridFilterModel(this.props.id, filterModel);\n  }\n\n  onSortChanged(params) {\n    let sortModel = params.api.getSortModel();\n    this.props.actions.saveGridSortModel(this.props.id, sortModel);\n  }\n\n  onFirstDataRendered(params) {\n    let isPivotMode = this.props?.isPivotMode; // boolean\n    let isPivotModeDifferent =\n      this.gridColumnApi?.isPivotMode() !== this?.props?.isPivotMode;\n\n    let sortModel = this.props?.sortModel;\n    let filterModel = this.props?.filterModel;\n    let columnState = this.props?.columnState;\n    let columnGroupState = this.props?.columnGroupState;\n\n    if (this?.props?.isPivotMode !== undefined && isPivotModeDifferent) {\n      this.gridColumnApi.setPivotMode(isPivotMode);\n    }\n\n    if (columnState) {\n      this.gridColumnApi.setColumnState(columnState);\n    }\n\n    if (columnGroupState) {\n      this.gridColumnApi.setColumnGroupState(columnGroupState);\n    }\n\n    if (sortModel) {\n      this.gridApi.setSortModel(sortModel);\n    }\n\n    if (filterModel) {\n      this.gridApi.setFilterModel(filterModel);\n    }\n  }\n\n  onSaveGridColumnState(e) {\n    if (!this.gridColumnApi) return;\n    let columnState = this.gridColumnApi?.getColumnState();\n    let columnGroupState = this.gridColumnApi?.getColumnGroupState();\n\n    this.debounceSaveGridColumnState(this.props.id, columnState);\n    this.debounceSaveGridColumnGroupState(this.props.id, columnGroupState);\n  }\n\n  onSavePivotModeState() {\n    let isPivotMode = this.gridColumnApi.isPivotMode();\n\n    let isPivotModeDifferentFromProps =\n      this.gridColumnApi.isPivotMode() !== this.props.isPivotMode;\n    if (isPivotModeDifferentFromProps)\n      this.debounceSaveGridPivotModeState(this.props.id, isPivotMode);\n  }\n\n  render() {\n    return (\n      <div\n        style={{ height: \"100%\", zIndex: 1000 }}\n        className={`ag-theme-alpine-dark ${this.props.className}`}\n      >\n        <AgGridReact\n          columnDefs={this.props.columnDefs}\n          rowData={this.props.rowData}\n          defaultColDef={this.defaultColDef}\n          sideBar={true}\n          //EVENTS\n          onFirstDataRendered={this.onFirstDataRendered.bind(this)}\n          onGridReady={this.onGridReady.bind(this)}\n          // state change events\n          onFilterChanged={this.onFilterChanged.bind(this)}\n          onSortChanged={this.onSortChanged.bind(this)}\n          onColumnVisible={this.onSaveGridColumnState.bind(this)}\n          onColumnPinned={this.onSaveGridColumnState.bind(this)}\n          onColumnResized={this.onSaveGridColumnState.bind(this)}\n          onColumnMoved={this.onSaveGridColumnState.bind(this)}\n          onColumnRowGroupChanged={this.onSaveGridColumnState.bind(this)}\n          onColumnValueChanged={this.onSaveGridColumnState.bind(this)}\n          onColumnPivotChanged={this.onSaveGridColumnState.bind(this)}\n          onColumnPivotModeChanged={this.onSavePivotModeState.bind(this)}\n        ></AgGridReact>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  currentViewInfo: state.currentViewInfo,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  actions: bindActionCreators(actions, dispatch),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MyGrid);\n","import React from \"react\";\n\nconst Panel = (props) => {\n  const { value, index, children, ...other } = props;\n\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`scrollable-force-tabpanel-${index}`}\n      aria-labelledby={`scrollable-force-tab-${index}`}\n      {...other}\n    >\n      {value === index && <> {children} </>}\n    </div>\n  );\n};\n\nexport default React.memo(Panel, areEqual);\n\nfunction areEqual(prevProps, nextProps) {\n  return (\n    prevProps.value === nextProps.value &&\n    prevProps.index === nextProps.index &&\n    prevProps.children.props.rowData === nextProps.children.props.rowData\n  );\n}\n","import React from \"react\";\n\nimport MyGrid from \"../../MyGrid/MyGrid\";\nimport { useSelector } from \"react-redux\";\nimport {\n  getCurrentViewAllGrids,\n  getCurrentViewTabIndex,\n} from \"../../../reducers/selectors\";\nimport Panel from \"./Panel\";\n\nfunction PanelsList(props) {\n  const allGrids = useSelector((state) => getCurrentViewAllGrids(state));\n  const currentViewTabIndex = useSelector((state) =>\n    getCurrentViewTabIndex(state)\n  );\n\n  let allPanels = allGrids.map((grid, i) => {\n    return (\n      <Panel\n        className={\"tabs-panel\"}\n        value={currentViewTabIndex}\n        index={i}\n        key={grid.id}\n      >\n        <MyGrid {...grid} />\n      </Panel>\n    );\n  });\n\n  return <>{allPanels}</>;\n}\n\n// export default PanelsList;\nexport default React.memo(PanelsList);\n","import React from \"react\";\n\nimport TabsList from \"./TabsList/TabsList\";\nimport PanelsList from \"./PanelsList/PanelsList\";\n\nexport const TabsView = (props) => {\n  return (\n    <div className={props.className}>\n      <TabsList></TabsList>\n      <PanelsList></PanelsList>\n    </div>\n  );\n};\n\nexport default React.memo(TabsView);\n","let url =\n  \"https://raw.githubusercontent.com/ag-grid/ag-grid/master/grid-packages/ag-grid-docs/src/olympicWinnersSmall.json\";\nlet columnDefs = [\n  { field: \"athlete\" },\n  { field: \"age\" },\n  { field: \"country\" },\n  { field: \"year\" },\n  { field: \"date\" },\n  { field: \"sport\" },\n  { field: \"gold\" },\n  { field: \"silver\" },\n  { field: \"bronze\" },\n  { field: \"total\" },\n];\n\nexport default function generateGridConfig() {\n  let gridConfig = {\n    url,\n    columnDefs,\n  };\n\n  return gridConfig;\n}\n","import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport MuiAlert from \"@material-ui/lab/Alert\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nimport { useDispatch } from \"react-redux\";\nimport { actions } from \"../../reducers/gridActions\";\n\nfunction Alert(props) {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nexport default function SaveLocalBtn() {\n  const dispatch = useDispatch();\n\n  const [open, setOpen] = React.useState(false);\n\n  const handleClick = () => {\n    dispatch(actions.saveStoreStateToLocalStorage());\n    setOpen(true);\n  };\n\n  const handleClose = (event, reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n\n    setOpen(false);\n  };\n\n  return (\n    <div>\n      <Button\n        onClick={handleClick}\n        className={\"action-btn\"}\n        variant=\"outlined\"\n        color=\"primary\"\n        size=\"large\"\n      >\n        SAVE STATE TO LOCAL STORAGE\n      </Button>\n\n      <Snackbar\n        anchorOrigin={{ vertical: \"top\", horizontal: \"left\" }}\n        open={open}\n        autoHideDuration={1500}\n        onClose={handleClose}\n      >\n        <Alert onClose={handleClose} severity=\"success\">\n          State saved to local storage!\n        </Alert>\n      </Snackbar>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Button } from \"@material-ui/core\";\nimport { useDispatch } from \"react-redux\";\nimport { actions } from \"../../reducers/gridActions\";\nimport generateGridConfig from \"../../helpers/generateGridConfig\";\nimport SaveLocalBtn from \"./SaveLocalBtn\";\n\nfunction ActionButtons(props) {\n  const dispatch = useDispatch();\n\n  function addNewTab() {\n    const gridConfig = generateGridConfig();\n\n    dispatch(actions.createNewTab(gridConfig));\n  }\n\n  return (\n    <div className={\"action-btn-container\"}>\n      <Button\n        className={\"action-btn\"}\n        onClick={() => dispatch(actions.createNewView())}\n        variant=\"outlined\"\n        color=\"primary\"\n        size=\"large\"\n      >\n        ADD NEW VIEW\n      </Button>\n\n      <Button\n        className={\"action-btn\"}\n        onClick={() => addNewTab()}\n        variant=\"outlined\"\n        color=\"primary\"\n        size=\"large\"\n      >\n        ADD NEW TAB\n      </Button>\n      <SaveLocalBtn></SaveLocalBtn>\n\n      <Button\n        onClick={() => localStorage.clear()}\n        className={\"action-btn\"}\n        variant=\"outlined\"\n        color=\"primary\"\n        size=\"large\"\n      >\n        CLEAR LOCAL STORAGE\n      </Button>\n    </div>\n  );\n}\n\nexport default React.memo(ActionButtons);\n","import React, { Component, PureComponent } from \"react\";\n\n// redux\nimport { connect } from \"react-redux\";\nimport { actions } from \"./reducers/gridActions\";\nimport { bindActionCreators } from \"redux\";\n\n// components\nimport AllViews from \"./components/AllViews/AllViews\";\nimport { getCurrentViewTabIndex } from \"./reducers/selectors\";\n\nimport TabsView from \"./components/TabsView/TabsView\";\nimport ActionButtons from \"./components/ActionButtons/ActionButtons\";\nimport generateGridConfig from \"./helpers/generateGridConfig\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"main-container\">\n        <ActionButtons />\n        <div className=\"flex-container\">\n          <AllViews className=\"all-views\"></AllViews>\n          <TabsView className=\"tabs-view\"></TabsView>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    allViews: state.allViews,\n    currentViewInfo: state.currentViewInfo,\n    currentViewTabIndex: getCurrentViewTabIndex(state),\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  actions: bindActionCreators(actions, dispatch),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { createMuiTheme } from \"@material-ui/core/styles\";\n// import purple from \"@material-ui/core/colors/purple\";\n// import green from \"@material-ui/core/colors/green\";\n\nconst theme = createMuiTheme({\n  //   palette: {\n  //     type: \"dark\",\n  //   },\n});\n\nexport default theme;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\nimport App from \"./App\";\n\nimport { ThemeProvider } from \"@material-ui/core\";\nimport theme from \"./theme\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <ThemeProvider theme={theme}>\n      <App />\n    </ThemeProvider>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}