{"version":3,"sources":["reducers/gridTypes.jsx","reducers/selectors.js","store.jsx","reducers/gridReducer.jsx","helpers/idGenerator.js","reducers/gridActions.jsx","components/AllViews/ViewCellRenderer.jsx","components/AllViews/AllViews.jsx","helpers/generateGridConfig.js","components/ActionButtons/SaveLocalBtn.jsx","components/ActionButtons/ActionButtons.jsx","App.jsx","theme.js","index.js"],"names":["types","CREATE_NEW_VIEW","DESTROY_VIEW","CREATE_NEW_TAB","DESTROY_TAB","ADD_NEW_VIEW","REMOVE_VIEW","CHANGE_VIEW_NAME","CHANGE_VIEW","ADD_NEW_TAB","CHANGE_TAB_NAME","SET_TAB_INDEX","SET_CURRENT_VIEW_INFO_TO_NULL","SET_GRID_DATA","FETCH_GRID_DATA","SAVE_GRID_SORT_MODEL","SAVE_GRID_FILTER_MODEL","SAVE_GRID_COLUMN_STATE","SAVE_GRID_COLUMN_GROUP_STATE","SAVE_GRID_PIVOT_MODE_STATE","SAVE_STORE_STATE_TO_LOCAL_STORAGE","RESTORE_STORE_STATE_TO_LOCAL_STORAGE","SET_GRID_FETCH_AGAIN_TO_FALSE","SET_ROW_SELECTION_SYNC_STATUS","getCurrentViewAllGrids","state","_state$allViews$state","_state$currentViewInf","_state$currentViewInf2","allViews","currentViewInfo","index","allGrids","getCurrentViewTabIndex","currentViewIndex","currentView","tabIndex","getCurrentView","getViewById","id","viewIndex","findIndex","view","Error","getGridByViewAndGridId","viewId","gridId","gridIndex","grid","getGridById","foundGrid","i","length","j","initialState","cache","window","localStorage","getItem","cacheParsed","JSON","parse","Object","objectSpread2","createStore","arguments","undefined","action","payload","type","produce","draftState","newView","push","addNewView","viewIndexToBeRemoved","getViewIndexById","splice","removeView","updatedCurrentViewInfo","changeView","_ref11","newName","name","changeViewName","gridConfig","currentViewAllGrids","addNewTab","_ref","changeTabName","changeTabIndex","setCurrentViewInfoToNull","_ref2","newData","rowData","setGridData","_ref3","sortModel","saveGridSortModel","_ref4","filterModel","saveGridFilterModel","_ref5","columnState","saveGridColumnState","_ref6","columnGroupState","saveGridColumnGroupState","_ref7","isPivotMode","saveGridPivotModeState","forEach","cachedView","rowSelectionSyncStatus","_ref8","columnDefs","url","cachedGrid","fetchAgain","cacheStringified","stringify","setItem","saveStoreStateToLocalStorage","_ref9","setGridFetchAgainToFalse","destroyTab","_ref10","status","setRowSelectionSyncStatus","composeWithDevTools","applyMiddleware","thunk","num","genId","Date","actions","createNewView","dispatch","getState","newViewId","createNewTab","isViewAvailable","nextTabIndex","store","currentViewId","setTabIndex","fetchGridData","destroyView","isCurrentView","isLastView","nextView","fetch","then","response","json","fetchGridDataSuccess","catch","err","fetchGridDataFail","changeTab","gridUrl","indx","nextAvailableIndex","restoreStoreStateToLocalStorage","ViewCellRenderer","props","_this","classCallCheck","this","_super","call","viewName","data","styles","backgroundColor","btnRef","React","createRef","onDeleteView","bind","assertThisInitialized","e","document","activeElement","blur","stopPropagation","current","addEventListener","removeEventListener","color","setState","_this2","react_default","a","createElement","IconButton","variant","onMouseEnter","changeBackgroundColor","onMouseLeave","style","marginRight","ref","aria-label","DeleteOutlined_default","fontSize","Component","LicenseManager","setLicenseKey","AllViews","frameworkComponents","viewCellRenderer","field","headerName","filter","sortable","flex","editable","onCellValueChanged","params","newValue","valueGetter","cellRenderer","cellRendererParams","prevProps","_this$props$currentVi","syncStatus","nodeToSelect","gridApi","getRowNode","isAlreadySelected","selected","setSelected","syncRowSelection","_this$props","_this$props$currentVi2","_this$props$currentVi3","node","api","columnApi","map","className","concat","main","overlayNoRowsTemplate","rowSelection","onGridReady","onFirstDataRendered","onRowSelected","getRowNodeId","rowHeight","popupParent","body","PureComponent","connect","bindActionCreators","Alert","assign","elevation","SaveLocalBtn","useDispatch","_React$useState","useState","_React$useState2","slicedToArray","open","setOpen","handleClose","event","reason","Button","onClick","size","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","onClose","SaveLocalBtn_Alert","severity","memo","clear","App","_Component","inherits","createSuper","apply","createClass","key","value","ActionButtons_ActionButtons","components_AllViews_AllViews","TabsView_default","currentViewTabIndex","theme","createMuiTheme","ReactDOM","render","es","ThemeProvider","src_App","getElementById"],"mappings":"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","file":"static/js/main.1db18e22.chunk.js","sourcesContent":["export const types = {\r\n    // COMPOSITE ACTIONS\r\n    CREATE_NEW_VIEW: \"CREATE_NEW_VIEW\",\r\n    DESTROY_VIEW: \"DESTROY_VIEW\",\r\n\r\n    CREATE_NEW_TAB: \"CREATE_NEW_TAB\",\r\n    DESTROY_TAB: \"DESTROY_TAB\",\r\n\r\n    // ELEMENTARY ACTIONS\r\n    ADD_NEW_VIEW: \"ADD_NEW_VIEW\",\r\n    REMOVE_VIEW: \"REMOVE_VIEW\",\r\n    CHANGE_VIEW_NAME: \"CHANGE_VIEW_NAME\",\r\n\r\n    CHANGE_VIEW: \"CHANGE_VIEW\",\r\n    ADD_NEW_TAB: \"ADD_NEW_TAB\",\r\n    CHANGE_TAB_NAME: \"CHANGE_TAB_NAME\",\r\n\r\n    SET_TAB_INDEX: \"SET_TAB_INDEX\",\r\n    SET_CURRENT_VIEW_INFO_TO_NULL: \"SET_CURRENT_VIEW_INFO_TO_NULL\",\r\n    SET_GRID_DATA: \"SET_GRID_DATA\",\r\n    FETCH_GRID_DATA: \"FETCH_GRID_DATA\",\r\n\r\n    SAVE_GRID_SORT_MODEL: \"SAVE_GRID_SORT_MODEL\",\r\n    SAVE_GRID_FILTER_MODEL: \"SAVE_GRID_FILTER_MODEL\",\r\n\r\n    SAVE_GRID_COLUMN_STATE: \"SAVE_GRID_COLUMN_STATE\",\r\n    SAVE_GRID_COLUMN_GROUP_STATE: \"SAVE_GRID_COLUMN_GROUP_STATE\",\r\n    SAVE_GRID_PIVOT_MODE_STATE: \"SAVE_GRID_PIVOT_MODE_STATE\",\r\n\r\n    SAVE_STORE_STATE_TO_LOCAL_STORAGE: \"SAVE_STORE_STATE_TO_LOCAL_STORAGE\",\r\n    RESTORE_STORE_STATE_TO_LOCAL_STORAGE: \"RESTORE_STORE_STATE_TO_LOCAL_STORAGE\",\r\n\r\n    SET_GRID_FETCH_AGAIN_TO_FALSE: \"SET_GRID_FETCH_AGAIN_TO_FALSE\",\r\n    SET_ROW_SELECTION_SYNC_STATUS: \"SET_ROW_SELECTION_SYNC_STATUS\",\r\n};\r\n","export function getCurrentViewAllGrids(state) {\r\n    return state?.allViews[state?.currentViewInfo?.index]?.allGrids\r\n        ? state?.allViews[state?.currentViewInfo?.index].allGrids\r\n        : [];\r\n}\r\n\r\nexport function getCurrentViewTabIndex(state) {\r\n    let currentViewInfo = state.currentViewInfo;\r\n    let currentViewIndex = currentViewInfo?.index;\r\n    let currentView = state?.allViews[currentViewIndex];\r\n    let tabIndex = currentView?.tabIndex ? currentView.tabIndex : 0;\r\n\r\n    return tabIndex;\r\n}\r\n\r\nexport function getCurrentView(state) {\r\n    return state.currentViewInfo\r\n        ? state.allViews[state.currentViewInfo.index]\r\n        : null;\r\n}\r\n\r\nexport function getViewById(state, id) {\r\n    let viewIndex = state.allViews.findIndex((view) => {\r\n        return view.id === id;\r\n    });\r\n\r\n    let view = state.allViews[viewIndex];\r\n\r\n    if (view) {\r\n        return view;\r\n    }\r\n\r\n    throw new Error(\"VIEW NOT FOUND!!\");\r\n}\r\n\r\nexport function getViewIndexById(state, id) {\r\n    let viewIndex = state.allViews.findIndex((view) => {\r\n        return view.id === id;\r\n    });\r\n\r\n    if (viewIndex > -1) {\r\n        return viewIndex;\r\n    }\r\n\r\n    throw new Error(\"VIEW INDEX NOT FOUND!!\");\r\n}\r\n\r\nexport function getGridByViewAndGridId(state, viewId, gridId) {\r\n    let view = getViewById(state, viewId);\r\n\r\n    let gridIndex = view.allGrids.findIndex((grid) => {\r\n        return grid.id === gridId;\r\n    });\r\n\r\n    let grid = view.allGrids[gridIndex];\r\n\r\n    if (grid) {\r\n        return grid;\r\n    }\r\n\r\n    throw new Error(\"GRID NOT FOUND!!\");\r\n}\r\n\r\nexport function getGridById(state, gridId) {\r\n    let allViews = state.allViews;\r\n    let foundGrid;\r\n\r\n    for (let i = 0; i < allViews.length; i++) {\r\n        let allGrids = allViews[i].allGrids;\r\n\r\n        if (typeof grid === \"object\") break;\r\n\r\n        for (let j = 0; j < allGrids.length; j++) {\r\n            let grid = allGrids[j];\r\n\r\n            if (grid.id === gridId) {\r\n                foundGrid = grid;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (foundGrid) return foundGrid;\r\n\r\n    new Error(\" GRID NOT FOUND << < << \");\r\n}\r\n","import { applyMiddleware, createStore } from \"redux\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\n\r\nimport gridReducer from \"./reducers/gridReducer\";\r\nimport logger from \"redux-logger\";\r\n\r\nimport thunk from \"redux-thunk\";\r\n\r\nlet initialState;\r\nlet cache = window.localStorage.getItem(\"cache\");\r\n\r\nif (cache) {\r\n    let cacheParsed = JSON.parse(cache);\r\n    initialState = { ...cacheParsed };\r\n} else {\r\n    initialState = {\r\n        ...hardCodedState(),\r\n    };\r\n}\r\n\r\nexport default createStore(\r\n    gridReducer,\r\n    initialState,\r\n    composeWithDevTools(applyMiddleware(thunk))\r\n    // composeWithDevTools(applyMiddleware(thunk, logger))\r\n);\r\n\r\nfunction hardCodedState() {\r\n    let stateAsString = `{\"currentViewInfo\":{\"id\":\"Thu Jun 04 2020 08:01:54 GMT+0100 (British Summer Time)2\",\"index\":0},\"allViews\":[{\"id\":\"Thu Jun 04 2020 08:01:54 GMT+0100 (British Summer Time)2\",\"tabIndex\":0,\"allGrids\":[{\"id\":\"Thu Jun 04 2020 08:01:54 GMT+0100 (British Summer Time)0\",\"columnDefs\":[{\"field\":\"athlete\"},{\"field\":\"age\"},{\"field\":\"country\"},{\"field\":\"year\"},{\"field\":\"date\"},{\"field\":\"sport\"},{\"field\":\"gold\"},{\"field\":\"silver\"},{\"field\":\"bronze\"},{\"field\":\"total\"}],\"url\":\"https://raw.githubusercontent.com/ag-grid/ag-grid/master/grid-packages/ag-grid-docs/src/olympicWinnersSmall.json\",\"sortModel\":[],\"fetchAgain\":true,\"name\":\"Tab 1\"},{\"id\":\"Thu Jun 04 2020 08:01:55 GMT+0100 (British Summer Time)3\",\"columnDefs\":[{\"field\":\"athlete\"},{\"field\":\"age\"},{\"field\":\"country\"},{\"field\":\"year\"},{\"field\":\"date\"},{\"field\":\"sport\"},{\"field\":\"gold\"},{\"field\":\"silver\"},{\"field\":\"bronze\"},{\"field\":\"total\"}],\"url\":\"https://raw.githubusercontent.com/ag-grid/ag-grid/master/grid-packages/ag-grid-docs/src/olympicWinnersSmall.json\",\"fetchAgain\":true,\"name\":\"Tab 2\"}],\"rowSelectionSyncStatus\":\"SYNC_DONE\",\"name\":\"View A\"},{\"id\":\"Thu Jun 04 2020 08:01:56 GMT+0100 (British Summer Time)4\",\"tabIndex\":0,\"allGrids\":[{\"id\":\"Thu Jun 04 2020 08:02:08 GMT+0100 (British Summer Time)5\",\"columnDefs\":[{\"field\":\"athlete\"},{\"field\":\"age\"},{\"field\":\"country\"},{\"field\":\"year\"},{\"field\":\"date\"},{\"field\":\"sport\"},{\"field\":\"gold\"},{\"field\":\"silver\"},{\"field\":\"bronze\"},{\"field\":\"total\"}],\"url\":\"https://raw.githubusercontent.com/ag-grid/ag-grid/master/grid-packages/ag-grid-docs/src/olympicWinnersSmall.json\",\"fetchAgain\":true}],\"rowSelectionSyncStatus\":\"SYNC_DONE\",\"name\":\"View B\"}]}`;\r\n    return JSON.parse(stateAsString);\r\n}\r\n","import { types } from \"../reducers/gridTypes\";\r\n\r\nimport { produce } from \"immer\"; // https://www.youtube.com/watch?v=FmKjwh34Rn8\r\nimport {\r\n    getCurrentViewAllGrids,\r\n    getViewIndexById,\r\n    getGridByViewAndGridId,\r\n    getGridById,\r\n    getViewById,\r\n} from \"./selectors\";\r\n\r\nexport default function gridReducer(state = {}, action) {\r\n    const payload = action.payload;\r\n    switch (action.type) {\r\n        case types.ADD_NEW_VIEW:\r\n            return addNewView(state, payload);\r\n\r\n        case types.REMOVE_VIEW:\r\n            return removeView(state, payload);\r\n\r\n        case types.CHANGE_VIEW:\r\n            return changeView(state, payload);\r\n        case types.CHANGE_VIEW_NAME:\r\n            return changeViewName(state, payload);\r\n\r\n        case types.ADD_NEW_TAB:\r\n            return addNewTab(state, payload);\r\n\r\n        case types.CHANGE_TAB_NAME:\r\n            return changeTabName(state, payload);\r\n\r\n        case types.SET_TAB_INDEX:\r\n            return changeTabIndex(state, payload);\r\n\r\n        case types.SET_CURRENT_VIEW_INFO_TO_NULL:\r\n            return setCurrentViewInfoToNull(state, payload);\r\n\r\n        case types.SET_GRID_DATA:\r\n            return setGridData(state, payload);\r\n\r\n        case types.SAVE_GRID_SORT_MODEL:\r\n            return saveGridSortModel(state, payload);\r\n\r\n        case types.SAVE_GRID_FILTER_MODEL:\r\n            return saveGridFilterModel(state, payload);\r\n\r\n        case types.SAVE_GRID_COLUMN_STATE:\r\n            return saveGridColumnState(state, payload);\r\n\r\n        case types.SAVE_GRID_COLUMN_GROUP_STATE:\r\n            return saveGridColumnGroupState(state, payload);\r\n\r\n        case types.SAVE_GRID_PIVOT_MODE_STATE:\r\n            return saveGridPivotModeState(state, payload);\r\n\r\n        case types.SAVE_STORE_STATE_TO_LOCAL_STORAGE:\r\n            return saveStoreStateToLocalStorage(state);\r\n        case types.RESTORE_STORE_STATE_TO_LOCAL_STORAGE:\r\n            return restoreStoreStateToLocalStorage(state);\r\n\r\n        case types.SET_GRID_FETCH_AGAIN_TO_FALSE:\r\n            return setGridFetchAgainToFalse(state, payload);\r\n        case types.DESTROY_TAB:\r\n            return destroyTab(state, payload);\r\n\r\n        case types.SET_ROW_SELECTION_SYNC_STATUS:\r\n            return setRowSelectionSyncStatus(state, payload);\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nfunction addNewView(state, id) {\r\n    return produce(state, (draftState) => {\r\n        let newView = {\r\n            id: id,\r\n            allGrids: [],\r\n        };\r\n\r\n        draftState.allViews.push(newView);\r\n    });\r\n}\r\n\r\nfunction removeView(state, id) {\r\n    return produce(state, (draftState) => {\r\n        let viewIndexToBeRemoved = getViewIndexById(draftState, id);\r\n        draftState.allViews.splice(viewIndexToBeRemoved, 1);\r\n    });\r\n}\r\n\r\nfunction changeView(state, id) {\r\n    return produce(state, (draftState) => {\r\n        let index = draftState.allViews.findIndex((view) => {\r\n            return view.id === id;\r\n        });\r\n        let updatedCurrentViewInfo = { id, index };\r\n        draftState.currentViewInfo = updatedCurrentViewInfo;\r\n    });\r\n}\r\n\r\nfunction addNewTab(state, gridConfig) {\r\n    return produce(state, (draftState) => {\r\n        let currentViewAllGrids = getCurrentViewAllGrids(draftState);\r\n        currentViewAllGrids.push(gridConfig);\r\n    });\r\n}\r\n\r\nfunction changeTabName(state, { viewId, gridId, newName }) {\r\n    return produce(state, (draftState) => {\r\n        let grid = getGridByViewAndGridId(draftState, viewId, gridId);\r\n        grid.name = newName;\r\n    });\r\n}\r\n\r\nfunction changeTabIndex(state, tabIndex) {\r\n    return produce(state, (draftState) => {\r\n        let currentView = draftState.allViews[draftState.currentViewInfo.index];\r\n        currentView.tabIndex = tabIndex;\r\n    });\r\n}\r\n\r\nfunction setCurrentViewInfoToNull(state) {\r\n    return produce(state, (draftState) => {\r\n        draftState.currentViewInfo = null;\r\n    });\r\n}\r\n\r\nfunction setGridData(state, { viewId, gridId, newData }) {\r\n    return produce(state, (draftState) => {\r\n        let grid = getGridByViewAndGridId(draftState, viewId, gridId);\r\n        grid.rowData = newData;\r\n    });\r\n}\r\n\r\nfunction saveGridSortModel(state, { gridId, sortModel }) {\r\n    return produce(state, (draftState) => {\r\n        let grid = getGridById(draftState, gridId);\r\n\r\n        grid.sortModel = sortModel;\r\n    });\r\n}\r\n\r\nfunction saveGridFilterModel(state, { gridId, filterModel }) {\r\n    return produce(state, (draftState) => {\r\n        let grid = getGridById(draftState, gridId);\r\n\r\n        grid.filterModel = filterModel;\r\n    });\r\n}\r\n\r\nfunction saveGridColumnState(state, { gridId, columnState }) {\r\n    return produce(state, (draftState) => {\r\n        let grid = getGridById(draftState, gridId);\r\n        if (grid) {\r\n            grid.columnState = columnState;\r\n        }\r\n    });\r\n}\r\n\r\nfunction saveGridColumnGroupState(state, { gridId, columnGroupState }) {\r\n    return produce(state, (draftState) => {\r\n        let grid = getGridById(draftState, gridId);\r\n        if (grid) {\r\n            grid.columnGroupState = columnGroupState;\r\n        }\r\n    });\r\n}\r\n\r\nfunction saveGridPivotModeState(state, { gridId, isPivotMode }) {\r\n    return produce(state, (draftState) => {\r\n        let grid = getGridById(draftState, gridId);\r\n        grid.isPivotMode = isPivotMode;\r\n    });\r\n}\r\n\r\nfunction saveStoreStateToLocalStorage(state) {\r\n    let cache = {\r\n        currentViewInfo: state.currentViewInfo,\r\n        allViews: [],\r\n    };\r\n\r\n    state.allViews.forEach((view) => {\r\n        let cachedView = {\r\n            id: view.id,\r\n            tabIndex: view.tabIndex,\r\n            allGrids: [],\r\n            rowSelectionSyncStatus: view?.rowSelectionSyncStatus,\r\n            name: view.name,\r\n        };\r\n\r\n        view.allGrids.forEach(\r\n            ({\r\n                 id,\r\n                 columnDefs,\r\n                 url,\r\n                 sortModel,\r\n                 filterModel,\r\n                 columnState,\r\n                 columnGroupState,\r\n                 isPivotMode,\r\n                 name,\r\n             }) => {\r\n                let cachedGrid = {\r\n                    id,\r\n                    columnDefs,\r\n                    url,\r\n                    sortModel,\r\n                    filterModel,\r\n                    columnState,\r\n                    columnGroupState,\r\n                    fetchAgain: true,\r\n                    isPivotMode,\r\n                    name,\r\n                };\r\n\r\n                cachedView.allGrids.push(cachedGrid);\r\n            }\r\n        );\r\n\r\n        cache.allViews.push(cachedView);\r\n    });\r\n\r\n    let cacheStringified = JSON.stringify(cache);\r\n\r\n    localStorage.setItem(\"cache\", cacheStringified);\r\n\r\n    return state;\r\n}\r\n\r\nfunction restoreStoreStateToLocalStorage(state) {\r\n    return JSON.parse(localStorage.getItem(\"cache\"));\r\n}\r\n\r\nfunction setGridFetchAgainToFalse(state, { viewId, gridId }) {\r\n    return produce(state, (draftState) => {\r\n        let grid = getGridByViewAndGridId(draftState, viewId, gridId);\r\n        grid.fetchAgain = false;\r\n    });\r\n}\r\n\r\nfunction destroyTab(state, tabIndex) {\r\n    return produce(state, (draftState) => {\r\n        let currentViewAllGrids = getCurrentViewAllGrids(draftState);\r\n\r\n        currentViewAllGrids.splice(tabIndex, 1);\r\n    });\r\n}\r\n\r\nfunction setRowSelectionSyncStatus(state, { viewId, status }) {\r\n    return produce(state, (draftState) => {\r\n        let view = getViewById(draftState, viewId);\r\n        view.rowSelectionSyncStatus = status;\r\n    });\r\n}\r\n\r\nfunction changeViewName(state, { viewId, newName }) {\r\n    return produce(state, (draftState) => {\r\n        let view = getViewById(draftState, viewId);\r\n        view.name = newName;\r\n    });\r\n}\r\n","let num = 0;\r\n\r\nexport default function genId() {\r\n    return new Date() + \"\" + num++;\r\n}","import { types } from \"./gridTypes\";\r\nimport store from \"../store\";\r\nimport genId from \"../helpers/idGenerator\";\r\nimport { getCurrentViewAllGrids } from \"./selectors\";\r\n\r\nexport const actions = {\r\n    // COMPLEX ACTIONS\r\n\r\n    createNewView() {\r\n        return (dispatch, getState) => {\r\n            var newViewId = genId();\r\n\r\n            dispatch(actions.addNewView(newViewId));\r\n            dispatch(actions.changeView(newViewId));\r\n        };\r\n    },\r\n\r\n    createNewTab(gridConfig) {\r\n        return (dispatch, getState) => {\r\n            let isViewAvailable = getState().currentViewInfo !== null;\r\n            // give the grid an id\r\n            gridConfig.id = genId();\r\n\r\n            // handle edge case, when no views are available\r\n            if (!isViewAvailable) {\r\n                let newViewId = genId();\r\n                dispatch(actions.createNewView(newViewId));\r\n            }\r\n            dispatch(actions.addNewTab(gridConfig));\r\n\r\n            let currentViewAllGrids = getCurrentViewAllGrids(store.getState());\r\n            let nextTabIndex = currentViewAllGrids.length - 1;\r\n            let currentViewId = store.getState().currentViewInfo.id;\r\n\r\n            dispatch(actions.setTabIndex(nextTabIndex));\r\n            dispatch(\r\n                actions.fetchGridData(currentViewId, gridConfig.id, gridConfig.url)\r\n            );\r\n        };\r\n    },\r\n\r\n    destroyView(viewId) {\r\n        return (dispatch, getState) => {\r\n            let currentViewId = getState().currentViewInfo.id;\r\n            let isCurrentView = currentViewId === viewId;\r\n            let isLastView = getState().allViews.length === 1;\r\n\r\n            dispatch(actions.removeView(viewId));\r\n\r\n            if (isLastView) {\r\n                dispatch(actions.setCurrentViewInfoToNull());\r\n                return;\r\n            }\r\n\r\n            if (isCurrentView && !isLastView) {\r\n                let allViews = getState().allViews;\r\n                let nextView = allViews[allViews.length - 1];\r\n                dispatch(actions.changeView(nextView.id));\r\n                return;\r\n            }\r\n\r\n            if (!isLastView && !isCurrentView) {\r\n                dispatch(actions.changeView(currentViewId));\r\n                return;\r\n            }\r\n        };\r\n    },\r\n\r\n    fetchGridData(viewId, gridId, url) {\r\n        return (dispatch) => {\r\n            fetch(url)\r\n                .then((response) => {\r\n                    return response.json().then((rowData) => {\r\n                        dispatch(actions.fetchGridDataSuccess(viewId, gridId, rowData));\r\n                    });\r\n                })\r\n                .catch((err) => {\r\n                    dispatch(actions.fetchGridDataFail(err));\r\n                });\r\n        };\r\n    },\r\n\r\n    fetchGridDataSuccess(viewId, gridId, rowData) {\r\n        return (dispatch) => {\r\n            dispatch(actions.setGridData(viewId, gridId, rowData));\r\n            dispatch(actions.setGridFetchAgainToFalse(viewId, gridId));\r\n        };\r\n    },\r\n\r\n    fetchGridDataFail(err) {\r\n        new Error(err, \" <<<< FETCH GRID DATA FAIL\");\r\n    },\r\n\r\n    changeTab(tabIndex) {\r\n        return (dispatch, getState) => {\r\n            let state = getState();\r\n            let currentViewIndex = state.currentViewInfo.index;\r\n            let currentView = state.allViews[currentViewIndex];\r\n            let viewId = state.currentViewInfo.id;\r\n            let grid = currentView.allGrids[tabIndex];\r\n            let gridId = grid.id;\r\n            let gridUrl = grid.url;\r\n            let fetchAgain = grid.fetchAgain;\r\n\r\n            dispatch(actions.setTabIndex(tabIndex));\r\n\r\n            if (fetchAgain) {\r\n                dispatch(actions.fetchGridData(viewId, gridId, gridUrl));\r\n            }\r\n        };\r\n    },\r\n\r\n    destroyTab(tabIndex) {\r\n        return (dispatch, getState) => {\r\n            dispatch({\r\n                type: types.DESTROY_TAB,\r\n                payload: tabIndex,\r\n            });\r\n\r\n            // if all CurrentView tabIndex exists in allGrids then do nothing, else change to next available tab\r\n\r\n            const currentViewIndex = getState().currentViewInfo.index;\r\n            const currentView = getState().allViews[currentViewIndex];\r\n\r\n            const indx = currentView.tabIndex;\r\n            const allGrids = currentView.allGrids;\r\n\r\n            let doesGridExist = allGrids[indx];\r\n            if (doesGridExist) return;\r\n\r\n            const nextAvailableIndex = allGrids.length - 1;\r\n\r\n            if (nextAvailableIndex !== -1)\r\n                dispatch(actions.changeTab(nextAvailableIndex));\r\n        };\r\n    },\r\n\r\n    // SIMPLE ACTIONS\r\n    addNewView(id) {\r\n        return {\r\n            type: types.ADD_NEW_VIEW,\r\n            payload: id,\r\n        };\r\n    },\r\n\r\n    changeTabName(viewId, gridId, newName) {\r\n        return {\r\n            type: types.CHANGE_TAB_NAME,\r\n            payload: { viewId, gridId, newName },\r\n        };\r\n    },\r\n\r\n    removeView(id) {\r\n        return {\r\n            type: types.REMOVE_VIEW,\r\n            payload: id,\r\n        };\r\n    },\r\n\r\n    changeViewName(viewId, newName) {\r\n        return {\r\n            type: types.CHANGE_VIEW_NAME,\r\n            payload: { viewId, newName },\r\n        };\r\n    },\r\n\r\n    changeView(id) {\r\n        return {\r\n            type: types.CHANGE_VIEW,\r\n            payload: id,\r\n        };\r\n    },\r\n\r\n    addNewTab(gridConfig) {\r\n        return {\r\n            type: types.ADD_NEW_TAB,\r\n            payload: gridConfig,\r\n        };\r\n    },\r\n\r\n    setTabIndex(tabIndex) {\r\n        return {\r\n            type: types.SET_TAB_INDEX,\r\n            payload: tabIndex,\r\n        };\r\n    },\r\n\r\n    setCurrentViewInfoToNull() {\r\n        return {\r\n            type: types.SET_CURRENT_VIEW_INFO_TO_NULL,\r\n        };\r\n    },\r\n\r\n    setGridData(viewId, gridId, newData) {\r\n        return {\r\n            type: types.SET_GRID_DATA,\r\n            payload: { viewId, gridId, newData },\r\n        };\r\n    },\r\n\r\n    saveGridSortModel(gridId, sortModel) {\r\n        return {\r\n            type: types.SAVE_GRID_SORT_MODEL,\r\n            payload: { gridId, sortModel },\r\n        };\r\n    },\r\n    saveGridFilterModel(gridId, filterModel) {\r\n        return {\r\n            type: types.SAVE_GRID_FILTER_MODEL,\r\n            payload: { gridId, filterModel },\r\n        };\r\n    },\r\n\r\n    saveGridColumnState(gridId, columnState) {\r\n        return {\r\n            type: types.SAVE_GRID_COLUMN_STATE,\r\n            payload: { gridId, columnState },\r\n        };\r\n    },\r\n\r\n    saveGridColumnGroupState(gridId, columnGroupState) {\r\n        return {\r\n            type: types.SAVE_GRID_COLUMN_GROUP_STATE,\r\n            payload: { gridId, columnGroupState },\r\n        };\r\n    },\r\n\r\n    saveGridPivotModeState(gridId, isPivotMode) {\r\n        return {\r\n            type: types.SAVE_GRID_PIVOT_MODE_STATE,\r\n            payload: { gridId, isPivotMode },\r\n        };\r\n    },\r\n\r\n    // except for rowData\r\n    saveStoreStateToLocalStorage() {\r\n        return {\r\n            type: types.SAVE_STORE_STATE_TO_LOCAL_STORAGE,\r\n        };\r\n    },\r\n\r\n    restoreStoreStateToLocalStorage() {\r\n        return {\r\n            type: types.RESTORE_STORE_STATE_TO_LOCAL_STORAGE,\r\n        };\r\n    },\r\n\r\n    setGridFetchAgainToFalse(viewId, gridId) {\r\n        return {\r\n            type: types.SET_GRID_FETCH_AGAIN_TO_FALSE,\r\n            payload: { viewId, gridId },\r\n        };\r\n    },\r\n    setRowSelectionSyncStatus(viewId, status) {\r\n        return {\r\n            type: types.SET_ROW_SELECTION_SYNC_STATUS,\r\n            payload: { viewId, status },\r\n        };\r\n    },\r\n};\r\n","import React, { Component } from \"react\";\r\n\r\nimport DeleteOutlinedIcon from \"@material-ui/icons/DeleteOutlined\";\r\nimport { IconButton } from \"@material-ui/core\";\r\n\r\nexport default class ViewCellRenderer extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.props = props;\r\n\r\n        this.state = {\r\n            viewName: this.props.data.viewName\r\n                ? this.props.data.viewName\r\n                : \"New View\",\r\n\r\n            styles: {\r\n                backgroundColor: \"rgba(0,0,0,0)\",\r\n            },\r\n        };\r\n        this.btnRef = React.createRef();\r\n        this.onDeleteView = this.onDeleteView.bind(this);\r\n    }\r\n\r\n    onDeleteView(e) {\r\n        document.activeElement.blur(); // workaround for flush update warning\r\n        e.stopPropagation();\r\n        let viewId = this.props.data.viewId;\r\n        this.props.destroyView(viewId);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.btnRef.current.addEventListener(\"click\", this.onDeleteView);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.btnRef.current.removeEventListener(\"click\", this.onDeleteView);\r\n    }\r\n\r\n    changeBackgroundColor(color) {\r\n        this.setState({\r\n            ...this.state,\r\n            styles: { ...this.state.styles, backgroundColor: color },\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <IconButton\r\n                    color=\"primary\"\r\n                    variant=\"contained\"\r\n                    onMouseEnter={() => {\r\n                        this.changeBackgroundColor(\"rgba(255,255,255,0.7)\");\r\n                    }}\r\n                    onMouseLeave={() => {\r\n                        this.changeBackgroundColor(\"rgba(0,0,0,0)\");\r\n                    }}\r\n                    style={{\r\n                        backgroundColor: this.state.styles.backgroundColor,\r\n                        marginRight: \"10px\",\r\n                    }}\r\n                    ref={this.btnRef}\r\n                    aria-label=\"delete\"\r\n                >\r\n                    <DeleteOutlinedIcon color=\"primary\" fontSize=\"small\" />\r\n                </IconButton>\r\n\r\n                {this.state.viewName}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { AgGridReact } from \"ag-grid-react\";\r\n\r\nimport \"ag-grid-community/dist/styles/ag-grid.css\";\r\nimport \"ag-grid-community/dist/styles/ag-theme-alpine.css\";\r\nimport \"ag-grid-enterprise\";\r\nimport { connect } from \"react-redux\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport { actions } from \"../../reducers/gridActions\";\r\n\r\nimport { LicenseManager } from \"ag-grid-enterprise\";\r\nimport { getCurrentView } from \"../../reducers/selectors\";\r\nimport ViewCellRenderer from \"./ViewCellRenderer\";\r\n\r\nLicenseManager.setLicenseKey(\r\n    \"For_Trialing_ag-Grid_Only-Not_For_Real_Development_Or_Production_Projects-Valid_Until-17_July_2021_[v2]_MTYyNjQ3NjQwMDAwMA==4d753d1acc8045a402b8037d53b9abc9\\n\"\r\n);\r\n\r\nclass AllViews extends React.PureComponent {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.frameworkComponents = {\r\n            viewCellRenderer: ViewCellRenderer,\r\n        };\r\n\r\n        this.columnDefs = [\r\n            {\r\n                field: \"viewName\",\r\n                headerName: \"Name\",\r\n                filter: true,\r\n                sortable: true,\r\n                flex: 1,\r\n                editable: true,\r\n                onCellValueChanged: (params) => {\r\n                    this.props.actions.changeViewName(\r\n                        params.data.viewId,\r\n                        params.newValue\r\n                    );\r\n                },\r\n                valueGetter: (params) =>\r\n                    params.data.viewName ? params.data.viewName : \"New View\",\r\n                cellRenderer: \"viewCellRenderer\",\r\n                cellRendererParams: {\r\n                    destroyView: this.props.actions.destroyView,\r\n                },\r\n            },\r\n        ];\r\n    }\r\n\r\n    syncRowSelection(prevProps) {\r\n        // Only SYNC ROW SELECTION WHEN NOT CURRENTLY ALREADY SYNCING\r\n        let currentViewInfo = this.props.currentViewInfo;\r\n\r\n        let syncStatus = this.props.currentView?.rowSelectionSyncStatus;\r\n        let nodeToSelect = this.gridApi.getRowNode(currentViewInfo?.id);\r\n        let isAlreadySelected = nodeToSelect?.selected;\r\n\r\n        if (\r\n            syncStatus === \"SYNCING\" ||\r\n            isAlreadySelected ||\r\n            nodeToSelect === undefined ||\r\n            currentViewInfo === null\r\n        )\r\n            return;\r\n\r\n        this.props.actions.setRowSelectionSyncStatus(currentViewInfo.id, \"SYNCING\");\r\n\r\n        nodeToSelect.setSelected(true);\r\n\r\n        this.props.actions.setRowSelectionSyncStatus(\r\n            currentViewInfo.id,\r\n            \"SYNC_DONE\"\r\n        );\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        this.syncRowSelection(prevProps);\r\n    }\r\n\r\n    onFirstDataRendered(params) {\r\n        let nodeToSelect = this.gridApi.getRowNode(this.props?.currentView?.id);\r\n        if (nodeToSelect) nodeToSelect.setSelected(true);\r\n    }\r\n\r\n    onRowSelected(params) {\r\n        // when state is syncing do nothing\r\n        if (this.props.currentView?.rowSelectionSyncStatus === \"SYNCING\") return;\r\n\r\n        // isSelectedNode makes sure to only pick the currently selected grid node, this is because rowSelected gets also triggered for deSelection\r\n        let isSelectedNode = params.node.selected;\r\n        if (isSelectedNode) this.props.actions.changeView(params.node.id);\r\n    }\r\n\r\n    onGridReady(params) {\r\n        this.gridApi = params.api;\r\n        this.columnApi = params.columnApi;\r\n    }\r\n\r\n    render() {\r\n        this.rowData = this.props.allViews.map((view) => {\r\n            return {\r\n                viewId: view.id,\r\n                viewName: view.name,\r\n            };\r\n        });\r\n\r\n        return (\r\n            <div className={`ag-theme-alpine  ${this.props.className}`}>\r\n                <AgGridReact\r\n                    overlayNoRowsTemplate={\r\n                        '<span style=\"padding: 10px; border: 2px solid #444; background: lightgoldenrodyellow;\"> There are no views available. Add a new view</span>'\r\n                    }\r\n                    rowSelection=\"single\"\r\n                    rowData={this.rowData}\r\n                    columnDefs={this.columnDefs}\r\n                    onGridReady={this.onGridReady.bind(this)}\r\n                    onFirstDataRendered={this.onFirstDataRendered.bind(this)}\r\n                    onRowSelected={this.onRowSelected.bind(this)}\r\n                    frameworkComponents={this.frameworkComponents}\r\n                    getRowNodeId={(node) => node.viewId}\r\n                    rowHeight={60}\r\n                    popupParent={document.body}\r\n                ></AgGridReact>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    allViews: state.allViews,\r\n    currentViewInfo: state.currentViewInfo,\r\n    currentView: getCurrentView(state),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    actions: bindActionCreators(actions, dispatch),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AllViews);\r\n","let url =\r\n    \"https://raw.githubusercontent.com/ag-grid/ag-grid/master/grid-packages/ag-grid-docs/src/olympicWinnersSmall.json\";\r\nlet columnDefs = [\r\n    { field: \"athlete\" },\r\n    { field: \"age\" },\r\n    { field: \"country\" },\r\n    { field: \"year\" },\r\n    { field: \"date\" },\r\n    { field: \"sport\" },\r\n    { field: \"gold\" },\r\n    { field: \"silver\" },\r\n    { field: \"bronze\" },\r\n    { field: \"total\" },\r\n];\r\n\r\nexport default function generateGridConfig() {\r\n    let gridConfig = {\r\n        url,\r\n        columnDefs,\r\n    };\r\n\r\n    return gridConfig;\r\n}\r\n","import React from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport MuiAlert from \"@material-ui/lab/Alert\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nimport { useDispatch } from \"react-redux\";\r\nimport { actions } from \"../../reducers/gridActions\";\r\n\r\nfunction Alert(props) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nexport default function SaveLocalBtn() {\r\n    const dispatch = useDispatch();\r\n\r\n    const [open, setOpen] = React.useState(false);\r\n\r\n    const handleClick = () => {\r\n        dispatch(actions.saveStoreStateToLocalStorage());\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = (event, reason) => {\r\n        if (reason === \"clickaway\") {\r\n            return;\r\n        }\r\n\r\n        setOpen(false);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Button\r\n                onClick={handleClick}\r\n                className={\"action-btn\"}\r\n                variant=\"outlined\"\r\n                color=\"primary\"\r\n                size=\"large\"\r\n            >\r\n                SAVE STATE TO LOCAL STORAGE\r\n            </Button>\r\n\r\n            <Snackbar\r\n                anchorOrigin={{ vertical: \"top\", horizontal: \"left\" }}\r\n                open={open}\r\n                autoHideDuration={1500}\r\n                onClose={handleClose}\r\n            >\r\n                <Alert onClose={handleClose} severity=\"success\">\r\n                    State saved to local storage!\r\n                </Alert>\r\n            </Snackbar>\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { actions } from \"../../reducers/gridActions\";\r\nimport generateGridConfig from \"../../helpers/generateGridConfig\";\r\nimport SaveLocalBtn from \"./SaveLocalBtn\";\r\n\r\nfunction ActionButtons(props) {\r\n    const dispatch = useDispatch();\r\n\r\n    function addNewTab() {\r\n        const gridConfig = generateGridConfig();\r\n\r\n        dispatch(actions.createNewTab(gridConfig));\r\n    }\r\n\r\n    return (\r\n        <div className={\"action-btn-container\"}>\r\n            <Button\r\n                className={\"action-btn\"}\r\n                onClick={() => dispatch(actions.createNewView())}\r\n                variant=\"outlined\"\r\n                color=\"primary\"\r\n                size=\"large\"\r\n            >\r\n                ADD NEW VIEW\r\n            </Button>\r\n\r\n            <Button\r\n                className={\"action-btn\"}\r\n                onClick={() => addNewTab()}\r\n                variant=\"outlined\"\r\n                color=\"primary\"\r\n                size=\"large\"\r\n            >\r\n                ADD NEW TAB\r\n            </Button>\r\n            <SaveLocalBtn></SaveLocalBtn>\r\n\r\n            <Button\r\n                onClick={() => localStorage.clear()}\r\n                className={\"action-btn\"}\r\n                variant=\"outlined\"\r\n                color=\"primary\"\r\n                size=\"large\"\r\n            >\r\n                CLEAR LOCAL STORAGE\r\n            </Button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default React.memo(ActionButtons);\r\n","import React, { Component, PureComponent } from \"react\";\r\n\r\n// redux\r\nimport { connect } from \"react-redux\";\r\nimport { actions } from \"./reducers/gridActions\";\r\nimport { bindActionCreators } from \"redux\";\r\n\r\n// components\r\nimport AllViews from \"./components/AllViews/AllViews\";\r\nimport { getCurrentViewTabIndex } from \"./reducers/selectors\";\r\n\r\nimport TabsView from \"./components/TabsView/TabsView\";\r\nimport ActionButtons from \"./components/ActionButtons/ActionButtons\";\r\n\r\nexport class App extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"main-container\">\r\n                <ActionButtons />\r\n                <div className=\"flex-container\">\r\n                    <AllViews className=\"all-views\"></AllViews>\r\n                    <TabsView className=\"tabs-view\"></TabsView>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        allViews: state.allViews,\r\n        currentViewInfo: state.currentViewInfo,\r\n        currentViewTabIndex: getCurrentViewTabIndex(state),\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    actions: bindActionCreators(actions, dispatch),\r\n});\r\n\r\n// const ExportApp = connect(mapStateToProps, mapDispatchToProps)(App)\r\n// export default ExportApp \r\n\r\n//I think this is the issue based on the error message\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App)","import { createMuiTheme } from \"@material-ui/core/styles\";\r\n// import purple from \"@material-ui/core/colors/purple\";\r\n// import green from \"@material-ui/core/colors/green\";\r\n\r\nconst theme = createMuiTheme({\r\n    //   palette: {\r\n    //     type: \"dark\",\r\n    //   },\r\n});\r\n\r\nexport default theme;","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./store\";\r\nimport ExportApp from \"./App\";\r\n\r\nimport { ThemeProvider } from \"@material-ui/core\";\r\nimport theme from \"./theme\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <ThemeProvider theme={theme}>\r\n            <ExportApp />\r\n        </ThemeProvider>\r\n    </Provider>,\r\n    document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}